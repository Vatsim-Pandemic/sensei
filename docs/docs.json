{
  "meta": {
    "generator": "0.9.0",
    "format": 20,
    "date": 1570374104178
  },
  "custom": {
    "general": {
      "name": "General",
      "files": {
        "welcome": {
          "name": "Welcome",
          "type": "md",
          "content": "![Discord-Sensei](https://discord-sensei.js.org/img/logo.27982581.png)\r\n\r\n### About.\r\ndiscord-sensei is a [node.js](https://nodejs.org/) module that makes the development of [Discord](https://discordapp.com/) Bots extremely easy. It serves as a wrapper around [discord.js](https://discord.js.org/#/) with a workflow thats easy to get used to and is well organized.\r\n\r\n[discord.js](https://discord.js.org/#/) is a great library for interacting with the [Discord API](https://discordapp.com/developers/docs) and it covers nearly 100% of the Entire API.\r\n\r\nSimplicity, and Being Straightforward to use while having a clean workflow was the inspiration behind this project.\r\n\r\n### Some of the Features.\r\n* Built on [discord.js](https://discord.js.org/#/), Same Coding Practices!\r\n* Keeps things Simple, Clean and Organized.\r\n* Automated Message and Argument Parsing.\r\n* Flexible Command Class.\r\n* Arguments with Data types including Strings, Numbers, Discord.js Classes.\r\n* Convient Permissions Setup\r\n* Written in TypeScript.\r\n* Many many more features to come.\r\n\r\n### Who is this for ?\r\nIf you want a Framework that lets users do all the fun stuff without letting them worry about the Management/Boilerplate work underneath all while keeping everything clean and organized, then you'd definitely be interested in checking this out!\r\n\r\n### Installation.\r\n```npm\r\nnpm install --save discord-sensei discord.js\r\n```\r\n\r\n### Basic Setup.\r\n\r\n```javascript\r\nconst { SenseiClient } = require(\"discord-sensei\");\r\nconst path = require(\"path\");\r\n\r\nconst client = new SenseiClient({\r\n  prefixes: [\"p!\", \"p>\"],\r\n  commandsDirectory: path.join(__dirname, \"/commands\")\r\n});\r\n\r\nclient.login(\"YOUR.BOT.TOKEN\");\r\n```\r\n\r\n#### Links.\r\n\r\n[Documentation](https://discord-sensei.js.org/#/docs)<br>\r\n[Discord Server](https://discord.gg/8hxuRZn)<br>\r\n[GitHub Repository](https://github.com/demonicious/sensei)\r\n",
          "path": "../docs/general/welcome.md"
        }
      }
    },
    "basic": {
      "name": "Basic",
      "files": {
        "startup": {
          "name": "Startup",
          "type": "md",
          "content": "![Discord-Sensei](https://discord-sensei.js.org/img/logo.27982581.png)\r\n\r\nThis guide assumes that you know the basics of how to work with [Node](https://nodejs.org/). Creating package.json files and Installing and using modules using [npm](https://npmjs.org/).\r\n\r\n## Installation & Setup.\r\n\r\n#### Init.\r\n\r\nCreate a New Directory and Initialize it with a `package.json`\r\n\r\nEdit the `package.json` file and add a `\"start\": \"node .\"` script under the \"test\" script.\r\n\r\nAfter adding the script, your `package.json` file should look similar to this:\r\n\r\n```json\r\n{\r\n    \"name\": \"my_bot\",\r\n    \"description\": \"My new Awesome Bot.\",\r\n    \"version\": \"1.0.0\",\r\n    \"main\": \"index.js\",\r\n    \"scripts\": {\r\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n      \"start\": \"node .\"\r\n    },\r\n    \"keywords\": [\"discord\", \"bot\"],\r\n    \"author\": \"me <me@myemail.com>\",\r\n    \"license\": \"ISC\"\r\n}\r\n```\r\n\r\nAfter this we can create our `index.js` file next to our `package.json` file.\r\n\r\n#### Installation.\r\n\r\nOpen up a Terminal Window in the working directory we created above.\r\n\r\nNow we can install `discord.js` and `discord-sensei` as such:\r\n\r\n```bash\r\nnpm install --save discord.js discord-sensei\r\n```\r\n\r\n#### Running The Bot.\r\n\r\nIf you haven't already, this would be the perfect time to Open up your Working Directory in a Text Editor of your Choice.\r\n\r\nEdit your `index.js` file and fill it with:\r\n\r\n```javascript\r\nconst { SenseiClient } = require(\"discord-sensei\");\r\nconst path = require(\"path\");\r\n\r\nconst client = new SenseiClient({\r\n  prefixes: [\"p!\"],\r\n  commandsDirectory: path.join(__dirname, \"/commands\")\r\n});\r\n\r\nclient.login(\"YOUR.BOT.TOKEN\");\r\n```\r\n\r\nRun the Bot using:\r\n\r\n```npm start```\r\n\r\nIf everything goes well, you should see these logs:\r\n\r\n```\r\n[Progress]: Beginning Startup Process. [1/4]\r\n[Progress]: Saving Configuration. [2/4]\r\n[Progress]: Starting Registry of System Events. [3/4]\r\n[Progress]: Bot Logged In & Ready! [4/4]\r\n[OK]: Watching for command events..\r\n```\r\n\r\nNow you can move on to [Configuration](https://discord-sensei.js.org/#/docs/main/stable/basic/configuration)\r\n",
          "path": "../docs/basic/startup.md"
        },
        "configuration": {
          "name": "Configuration",
          "type": "md",
          "content": "![Discord-Sensei](https://discord-sensei.js.org/img/logo.27982581.png)\r\n\r\n",
          "path": "../docs/basic/configuration.md"
        },
        "firstcommand": {
          "name": "First Command",
          "type": "md",
          "content": "![Discord-Sensei](https://discord-sensei.js.org/img/logo.27982581.png)\r\n\r\n## Creating the First Command.\r\n\r\nIf your Working Directory doesn't have a `/commands` directory, then this would be the time to do so.\r\n\r\n*Note: The name of this directory doesn't have to be 'commands', It can be anything as long as you set the `commandsDirectory` property to the path of this directory in `index.js`*\r\n\r\nThis bot framework uses a separate file for each command, and this `/commands` directory will be used to hold all of our Command Files.\r\n\r\n### Creating our Command File.\r\n\r\nWe could just create a new file directly under `/commands` but imagine you have a large bot with a lot of commands, It will easily get extremely tedious if all commands are just directly under the `/commands` directory.\r\n\r\nTo Fix this issue, we can simply create a sub-directory under `/commands`.\r\n\r\n*Sub-Directories can be created under the `/commands` directory. Creating sub-directories doesn't hold any significance other than organizing.*<br>\r\n*If you want to disable a command, you can create a sub-directory named `/_drafts` under `/commands` which will simply be ignored by the bot.*\r\n\r\nWe're gonna make a new directory named `./Interaction` under `/commands`. The name of this directory doesn't matter, I just went for \"Interaction\" because it makes sense to the type of commands that will be in this directory.\r\n\r\nIn our `./Interaction` Directory we're gonna create a new file named `HiCommand.js`. This will be an extremely basic command that just says Hi to a User.\r\n\r\n### Writing the Code for The Command\r\n\r\nOpen up our newly created file in your favorite Text Editor.\r\n\r\nThe first thing to do is to require the `SenseiCommand` class from `discord-sensei`\r\n\r\n#### Requiring Modules.\r\n\r\n```javascript\r\nconst { SenseiCommand } = require(\"discord-sensei\");\r\n```\r\n\r\nI want the Bot to say Hi in a nicer way then just a message, So i'm deciding to use RichEmbeds. For that I will have to require `RichEmbed` from `discord.js`\r\n\r\n```javascript\r\nconst { RichEmbed } = require(\"discord.js\");\r\n```\r\n\r\n#### Creating our Class.\r\n\r\nWe will declare a class named `HiCommand` that extends `SenseiCommand`. We're gonna define the Constructor method, and the first thing in the constructor method should be the super() method as such:\r\n\r\n##### Declaration\r\n\r\n```javascript\r\nclass HiCommand extends SenseiCommand {\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n```\r\n\r\n##### Setting of Properties.\r\n\r\nWe're gonna use the Methods provided by `SenseiCommand` in the constructor method to set all of the different properties for this command.<br>\r\n*[SenseiCommand Methods](https://discord-sensei.js.org/#/docs/main/stable/class/SenseiCommand)*\r\n\r\n```javascript\r\nclass HiCommand extends SenseiCommand {\r\n  constructor() {\r\n    super();\r\n\r\n    // Set the Name and Aliases\r\n    this.setNames([\r\n      \"hi\",\r\n      \"hello\"\r\n    ]);\r\n    \r\n    // Set the Category\r\n    this.setCategory(\"Interaction\");\r\n    \r\n    // Set the Information\r\n    this.setInfo({\r\n      name: \"Hi Command\",\r\n      description: \"Says Hi to Someone\",\r\n      syntax: \"hi [Optional User Mention]\"\r\n    });\r\n    \r\n    // Set the Arguments. We will only have 1 Optional Argument for this Command.\r\n    this.setArguments([\r\n      {\r\n        name: \"user\",\r\n        type: \"USER_MENTION\",\r\n        optional: true,\r\n        default: \"MESSAGE_AUTHOR\" // If the User doesn't pass this argument, the Message Author will be the default value.\r\n      }\r\n    ]);\r\n  }\r\n}\r\n```\r\n\r\n##### Creating our Run Method.\r\n\r\nAfter this we need to define our run() method in the Class. This is the actual code that will be executed by the Bot.\r\nWe need to follow a Specific Syntax for the run() method's definition; [run() Method](https://discord-sensei.js.org/#/docs/main/stable/class/SenseiCommand?scrollTo=run)\r\n\r\nThe run method is declared as such in the class:\r\n\r\n```javascript\r\nasync run(bot, message, args) {}\r\n```\r\n\r\nHere, the `bot` is the [SenseiClient](https://discord-sensei.js.org/#/docs/main/stable/class/SenseiClient) Object. The `message` is the [Message](https://discord.js.org/#/docs/main/stable/class/Message) that triggered the command.<br>`args` is an Object containing the Arguments this command was executed with. We can access the values of the arguments we defined above using their `name` as such:\r\n```javascript\r\nconsole.log(args.user);\r\n// Will log the value of the argument with the name 'user' we defined above.\r\n```\r\n\r\nThe run() method definition for this command will be like this:\r\n\r\n```javascript\r\nasync run(bot, message, args) {\r\n  let rb = new RichEmbed;\r\n  rb.setDescription(`Hi ${args.user.username}`)\r\n  .setColor(\"#68c73f\")\r\n  .setFooter(\"My Awesome Bot\")\r\n  .setTimestamp();\r\n  \r\n  message.channel.send(rb);\r\n  return;\r\n}\r\n```\r\n\r\n#### Exporting our Command Class.\r\n\r\nTo actually make it so that the Bot can use this command, we need to export our newly created class at the end of the file as such:\r\n\r\n```javascript\r\nmodule.exports = HiCommand;\r\n```\r\n\r\n### Full Code.\r\n\r\nThis is how our entire command file should look like (without comments)\r\n\r\n```javascript\r\nconst { SenseiCommand } = require(\"discord-sensei\");\r\nconst { RichEmbed } = require(\"discord.js\");\r\n\r\nclass HiCommand extends SenseiCommand {\r\n  constructor() {\r\n    super();\r\n    this.setNames([\r\n      \"hi\",\r\n      \"hello\"\r\n    ]);\r\n    this.setCategory(\"Interaction\");\r\n    this.setInfo({\r\n      name: \"Hi Command\",\r\n      description: \"Says Hi to Someone\",\r\n      syntax: \"hi [Optional User Mention]\"\r\n    });\r\n    this.setArguments([\r\n      {\r\n        name: \"user\",\r\n        type: \"USER_MENTION\",\r\n        optional: true,\r\n        default: \"MESSAGE_AUTHOR\"\r\n      }\r\n    ]);\r\n  }\r\n  \r\n  async run(bot, message, args) {\r\n    let rb = new RichEmbed;\r\n    rb.setDescription(`Hi ${args.user.username}`)\r\n    .setColor(\"#68c73f\")\r\n    .setFooter(\"My Awesome Bot\")\r\n    .setTimestamp();\r\n\r\n    message.channel.send(rb);\r\n    return;\r\n  }\r\n}\r\n\r\nmodule.exports = HiCommand;\r\n```\r\n\r\nThis should be the response of the Bot when you try to execute this command:\r\n\r\n![Proof](https://discord-sensei.js.org/img/command1.jpeg)\r\n",
          "path": "../docs/basic/firstcommand.md"
        },
        "directorystructure": {
          "name": "Directory Structure",
          "type": "md",
          "content": "![Discord-Sensei](https://discord-sensei.js.org/img/logo.27982581.png)\r\n\r\n## Directory Structure.\r\n\r\nThis is the Default Directory Structure:\r\n\r\n```\r\n├── commands                   \r\n│   ├── Group 1\r\n|   |   └── // Command Files Belonging to Group 1 \r\n│   ├── Group 2\r\n|   |   └── // Command Files Belonging to Group 2 \r\n│   └── _drafts\r\n|       └── // Draft Command Files that are ignored by the bot.\r\n├── index.js\r\n└── package.json\r\n```\r\n",
          "path": "../docs/basic/directorystructure.md"
        }
      }
    },
    "snippets": {
      "name": "Snippets",
      "files": {
        "ping": {
          "name": "Ping Command",
          "type": "md",
          "content": "",
          "path": "../docs/snippets/ping.md"
        },
        "hug": {
          "name": "Hug Command",
          "type": "md",
          "content": "",
          "path": "../docs/snippets/hug.md"
        },
        "kickuser": {
          "name": "Kick User Command",
          "type": "md",
          "content": "",
          "path": "../docs/snippets/kickuser.md"
        }
      }
    }
  },
  "classes": [
    {
      "name": "SenseiClient",
      "description": "Extends [Client](https://discord.js.org/#/docs/main/stable/class/Client).",
      "construct": {
        "name": "SenseiClient",
        "params": [
          {
            "name": "configObject",
            "description": "An Object containing all of the Configuration Instructions.",
            "type": [
              [
                [
                  "Config"
                ]
              ]
            ]
          }
        ]
      },
      "props": [
        {
          "name": "info",
          "description": "Stores the Name, Version, and Author Information of the Bot.",
          "type": [
            [
              [
                "BotInfo"
              ]
            ]
          ],
          "meta": {
            "line": 27,
            "file": "client.js",
            "path": "../build/components"
          }
        },
        {
          "name": "prefixes",
          "description": "Array of prefixes that the Bot Uses. A Bot may have atleast 1 Prefix to work.",
          "type": [
            [
              [
                "Array",
                "<"
              ],
              [
                "string",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 40,
            "file": "client.js",
            "path": "../build/components"
          }
        },
        {
          "name": "commands",
          "description": "An Object that holds all of the Registered Commands.",
          "type": [
            [
              [
                "Object"
              ]
            ]
          ],
          "meta": {
            "line": 45,
            "file": "client.js",
            "path": "../build/components"
          }
        },
        {
          "name": "cooldowns",
          "description": "The Cooldown Settings of the Bot. Determines how cooldowns should be applied.",
          "type": [
            [
              [
                "CooldownSettings"
              ]
            ]
          ],
          "meta": {
            "line": 52,
            "file": "client.js",
            "path": "../build/components"
          }
        },
        {
          "name": "custom",
          "description": "An object that allows you to declare custom properties under the Bot. Some custom.properties are pre-declared in this object.",
          "type": [
            [
              [
                "Object"
              ]
            ]
          ],
          "meta": {
            "line": 60,
            "file": "client.js",
            "path": "../build/components"
          }
        },
        {
          "name": "reportErrors",
          "description": "Determines whether insignificant errors should be reported to the user or not. Major errors are reported regardless.",
          "access": "private",
          "type": [
            [
              [
                "Boolean"
              ]
            ]
          ],
          "meta": {
            "line": 67,
            "file": "client.js",
            "path": "../build/components"
          }
        },
        {
          "name": "logMessages",
          "description": "Determines whether the Bot should Log information messages to the Console. Errors and Warnings are logged regardless.",
          "access": "private",
          "type": [
            [
              [
                "Boolean"
              ]
            ]
          ],
          "meta": {
            "line": 73,
            "file": "client.js",
            "path": "../build/components"
          }
        },
        {
          "name": "commandsDir",
          "description": "The path of the directory where the commands are saved.",
          "access": "private",
          "type": [
            [
              [
                "string"
              ]
            ]
          ],
          "meta": {
            "line": 79,
            "file": "client.js",
            "path": "../build/components"
          }
        },
        {
          "name": "log",
          "description": "An Object that is used for Logging messages to the console",
          "access": "protected",
          "type": [
            [
              [
                "Logger"
              ]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "client.js",
            "path": "../build/components"
          }
        }
      ],
      "meta": {
        "line": 20,
        "file": "client.js",
        "path": "../build/components"
      }
    },
    {
      "name": "SenseiCommand",
      "description": "Represents a Command that can be executed by [SenseiClient](SenseiClient.html).",
      "props": [
        {
          "name": "names",
          "description": "Array of Names of the Command.",
          "type": [
            [
              [
                "Array",
                "<"
              ],
              [
                "string",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 31,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "category",
          "description": "The Category which this Command Belongs To.",
          "type": [
            [
              [
                "string"
              ]
            ]
          ],
          "meta": {
            "line": 36,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "info",
          "description": "Information About the Command",
          "type": [
            [
              [
                "CommandInfo"
              ]
            ]
          ],
          "meta": {
            "line": 41,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "cooldown",
          "description": "The Cooldown Duration of this Command (If Applicable)",
          "type": [
            [
              [
                "number"
              ]
            ]
          ],
          "meta": {
            "line": 50,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "ignoreCooldown",
          "description": "If this Property is set to True, the Command will ignore any type of cooldown.",
          "type": [
            [
              [
                "Boolean"
              ]
            ]
          ],
          "meta": {
            "line": 55,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "arguments",
          "description": "The Array of Arguments this command requires.",
          "type": [
            [
              [
                "Array",
                "<"
              ],
              [
                "ArgumentObject",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 60,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "log",
          "description": "An Object of type Logger that is used to Log messages to the console.",
          "type": [
            [
              [
                "Logger"
              ]
            ]
          ],
          "meta": {
            "line": 65,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "permissions",
          "description": "The Permissions required to execute this command. By default no permission checks are applied.",
          "type": [
            [
              [
                "Array",
                "<"
              ],
              [
                "PermissionResolvable",
                ">"
              ]
            ]
          ],
          "meta": {
            "line": 70,
            "file": "command.js",
            "path": "../build/components"
          }
        }
      ],
      "methods": [
        {
          "name": "setNames",
          "description": "Used to set the Name(s) of the Command.",
          "params": [
            {
              "name": "namesArray",
              "description": "The Array of Names.",
              "type": [
                [
                  [
                    "Array",
                    "<"
                  ],
                  [
                    "string",
                    ">"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 110,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "setCategory",
          "description": "Used to set the Category of the Command.",
          "params": [
            {
              "name": "category",
              "description": "Category Name.",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 127,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "setInfo",
          "description": "Used to set some Information about the Command",
          "params": [
            {
              "name": "info",
              "type": [
                [
                  [
                    "CommandInfo"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 141,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "setCooldown",
          "description": "Used to set the Cooldown Duration of the Command.",
          "params": [
            {
              "name": "duration",
              "description": "The Duration in Seconds.",
              "type": [
                [
                  [
                    "number"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 155,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "setIgnoreCooldown",
          "description": "Used to set the \"ignoreCooldown\" property.",
          "params": [
            {
              "name": "bool",
              "description": "The Duration in Seconds.",
              "type": [
                [
                  [
                    "boolean"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 169,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "setArguments",
          "description": "Used to set the Arguments for the Command",
          "params": [
            {
              "name": "argumentsArray",
              "description": "Array of Arguments",
              "type": [
                [
                  [
                    "Array",
                    "<"
                  ],
                  [
                    "ArgumentObject",
                    ">"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 177,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "setPermissions",
          "description": "Used to set the Permissions required to Execute this command;",
          "params": [
            {
              "name": "permissionsArray",
              "description": "Array of [PermissionResolvable](https://discord.js.org/#/docs/main/stable/class/Permissions?scrollTo=s-FLAGS)",
              "type": [
                [
                  [
                    "Array",
                    "<"
                  ],
                  [
                    "PermissionResolvable",
                    ">"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 191,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "run",
          "description": "The Code to be Executed when this Command is called by a Discord User. This Method needs to be Defined by the User inside a Command Class that Extends this SenseiCommand class.",
          "examples": [
            "// Here's how this method may be defined in a Command:\rasync run(bot, message, args) {\r     let sender = message.author.username;\r     let channel = message.channel;\r\r     channel.send(`Hello ${sender}!. How are you doing ?`);\r     return;\r}"
          ],
          "params": [
            {
              "name": "bot",
              "description": "The SenseiClient Object.",
              "type": [
                [
                  [
                    "SenseiClient"
                  ]
                ]
              ]
            },
            {
              "name": "message",
              "description": "The [Message](https://discord.js.org/#/docs/main/stable/class/Message) Object",
              "type": [
                [
                  [
                    "Message"
                  ]
                ]
              ]
            },
            {
              "name": "args",
              "description": "The Arguments this message was sent with.",
              "type": [
                [
                  [
                    "Object"
                  ]
                ]
              ]
            }
          ],
          "async": true,
          "meta": {
            "line": 217,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "reportError",
          "description": "This Method is used for Error Reporting (To the Discord User)",
          "params": [
            {
              "name": "bot",
              "description": "The SenseiClient Object.",
              "type": [
                [
                  [
                    "SenseiClient"
                  ]
                ]
              ]
            },
            {
              "name": "message",
              "description": "The [Message](https://discord.js.org/#/docs/main/stable/class/Message) Object",
              "type": [
                [
                  [
                    "Message"
                  ]
                ]
              ]
            },
            {
              "name": "messages",
              "description": "An array of messages to be included in the error.",
              "type": [
                [
                  [
                    "Array",
                    "<"
                  ],
                  [
                    "String",
                    ">"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 224,
            "file": "command.js",
            "path": "../build/components"
          }
        },
        {
          "name": "verifyPermissions",
          "description": "This Method is used to check if the User has the necessary permissions required to Execute this command.",
          "access": "private",
          "params": [
            {
              "name": "member",
              "description": "The [GuildMember](https://discord.js.org/#/docs/main/stable/class/GuildMember) to Check.",
              "type": [
                [
                  [
                    "DiscordGuildMember"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Boolean"
              ]
            ]
          ],
          "meta": {
            "line": 250,
            "file": "command.js",
            "path": "../build/components"
          }
        }
      ],
      "meta": {
        "line": 24,
        "file": "command.js",
        "path": "../build/components"
      }
    },
    {
      "name": "Logger",
      "description": "A Class used for Logging Stuff to the Console. Can be used by Anyone, although its main usage is to Log Messages from the Other Classes.",
      "methods": [
        {
          "name": "error",
          "description": "Used to log Errors to the console.",
          "params": [
            {
              "name": "message",
              "description": "The Error Message to Log.",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Void"
              ]
            ]
          ],
          "meta": {
            "line": 16,
            "file": "log.js",
            "path": "../build/components"
          }
        },
        {
          "name": "warn",
          "description": "Used to log Warnings to the console.",
          "params": [
            {
              "name": "message",
              "description": "The Warning Message to Log.",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Void"
              ]
            ]
          ],
          "meta": {
            "line": 25,
            "file": "log.js",
            "path": "../build/components"
          }
        },
        {
          "name": "info",
          "description": "Used to log Info Messages to the console.",
          "params": [
            {
              "name": "message",
              "description": "The Information Message to Log.",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Void"
              ]
            ]
          ],
          "meta": {
            "line": 34,
            "file": "log.js",
            "path": "../build/components"
          }
        },
        {
          "name": "ok",
          "description": "Used to log Success Messages to the console.",
          "params": [
            {
              "name": "message",
              "description": "The Success Message to Log.",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Void"
              ]
            ]
          ],
          "meta": {
            "line": 43,
            "file": "log.js",
            "path": "../build/components"
          }
        },
        {
          "name": "progress",
          "description": "Used to log Progress Related Messages to the console.",
          "params": [
            {
              "name": "message",
              "description": "The Progress Message to Log.",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            }
          ],
          "returns": [
            [
              [
                "Void"
              ]
            ]
          ],
          "meta": {
            "line": 52,
            "file": "log.js",
            "path": "../build/components"
          }
        }
      ],
      "meta": {
        "line": 9,
        "file": "log.js",
        "path": "../build/components"
      }
    }
  ],
  "interfaces": [],
  "typedefs": [
    {
      "name": "AuthorInfo",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "name",
          "description": "The Real/Online name of the Author.",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "username",
          "description": "The Discord Username of the Author.",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "email",
          "description": "The E-Mail address of the Author.",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 243,
        "file": "client.js",
        "path": "../build/components"
      }
    },
    {
      "name": "BotInfo",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "name",
          "description": "The Name of the Bot.",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "version",
          "description": "The Current Version of the Bot.",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "author",
          "description": "Information about the Author.",
          "type": [
            [
              [
                "AuthorInfo"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 249,
        "file": "client.js",
        "path": "../build/components"
      }
    },
    {
      "name": "CooldownSettings",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "type",
          "description": "Whether the Cooldowns should be applied per command or not.",
          "type": [
            [
              [
                "command",
                "\""
              ]
            ],
            [
              [
                "system",
                "\""
              ]
            ]
          ]
        },
        {
          "name": "systemCooldown",
          "description": "If cooldowns.type is \"system\" then, this is the duration of the cooldown.",
          "type": [
            [
              [
                "number"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 255,
        "file": "client.js",
        "path": "../build/components"
      }
    },
    {
      "name": "Config",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "prefixes",
          "description": "The Array of Prefixes the bot uses. The first item is considered the Main Prefix, others are considered alternative prefixes.",
          "type": [
            [
              [
                "Array",
                "<"
              ],
              [
                "string",
                ">"
              ]
            ]
          ]
        },
        {
          "name": "commandsDirectory",
          "description": "The Directory where the Bot should scan for Command Files.",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "logMessages",
          "description": "Whether the Bot should Log Information Messages to the Console or not.",
          "optional": true,
          "default": false,
          "type": [
            [
              [
                "boolean"
              ]
            ]
          ]
        },
        {
          "name": "reportErrors",
          "description": "Whether even the smallest of errors should be reported to the Discord User or not.",
          "optional": true,
          "default": false,
          "type": [
            [
              [
                "boolean"
              ]
            ]
          ]
        },
        {
          "name": "cooldowns",
          "description": "Determines how cooldowns should be applied in the bot.",
          "optional": true,
          "default": "{ type: \"command\", systemCooldown: 10 }",
          "type": [
            [
              [
                "CooldownSettings"
              ]
            ]
          ]
        },
        {
          "name": "info",
          "description": "Some Optional but Useful information about the bot.",
          "optional": true,
          "default": "{ name: \"Sensei Bot\", version: 1.0.0, author: { name: \"Demonicious\", username: \"Demonicious#9560\", email: \"demoncious@gmail.com\" } }",
          "type": [
            [
              [
                "BotInfo"
              ]
            ]
          ]
        },
        {
          "name": "custom",
          "description": "Used to Declare Custom Properties that are held in the bot object.",
          "optional": true,
          "default": "{ footerText: \"SenseiBot\", errorColor: \"#ef2e2e\", successColor: \"#68c73f\", secondaryColor: \"#8e7878\", primaryColor: \"#5f5ac6\" }",
          "type": [
            [
              [
                "Object"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 260,
        "file": "client.js",
        "path": "../build/components"
      }
    },
    {
      "name": "CommandInfo",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "name",
          "description": "The Extensive Name of the command.",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "description",
          "description": "Short Description of the command.",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "syntax",
          "description": "The Basic Usage of the Command.",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 7,
        "file": "command.js",
        "path": "../build/components"
      }
    },
    {
      "name": "ArgumentObject",
      "type": [
        [
          [
            "Object"
          ]
        ]
      ],
      "props": [
        {
          "name": "name",
          "description": "The Name of the Argument. This is used to access this argument later in the run() method.",
          "type": [
            [
              [
                "string"
              ]
            ]
          ]
        },
        {
          "name": "type",
          "description": "The Type of the Argument.",
          "type": [
            [
              [
                "ArgumentTypeResolvable"
              ]
            ]
          ]
        },
        {
          "name": "optional",
          "description": "Whether the Argument is Optional or not.",
          "type": [
            [
              [
                "boolean"
              ]
            ]
          ]
        },
        {
          "name": "default",
          "description": "The Default value (if set) of this Argument (Only Applicable if Argument is Optional)",
          "type": [
            [
              [
                "ArgumentDefaultResolvable"
              ]
            ]
          ]
        }
      ],
      "meta": {
        "line": 13,
        "file": "command.js",
        "path": "../build/components"
      }
    }
  ],
  "externals": []
}